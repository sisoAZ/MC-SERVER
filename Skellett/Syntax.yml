# Skellett the addon with the beast name!
# 
# This file generates all new syntax registered for Skellett.

Main:
  StylishBoards:
  - '[skellett] [(update|edit)] [the] [display] title of (stylish|style|simple) [score][
    ][board] [named] %string%'
  - '[skellett] [(update|edit)] [the] (stylish|style|simple) [score][ ][board] %string%[''s]
    [display] title'
  - '[skellett] [(update|edit)] [the] [(stylish|style|simple)] [score][ ]board [of]
    id [based] [score] [(with [id]|named)] %string%'
  - '[the] (stylish|style|simple) [score][ ][board] of %player%'
  - '%player%''s (stylish|style|simple) [score][ ][board]'
  - (stylish|style|simple) [score][ ]board %string% (1¦(is set|[does] exist[s])|2¦(is(n't|
    not) set|does(n't| not) exist[s]))
  - '[skellett] create [a[n]] [new] id [based] [score] [(with [id]|named)] %string%
    [(with|and)] [(text|string)] %string% [(in|with|for|and)] slot %number% (in|for|of)
    (stylish|style|simple) [score][ ]board [with] [name[d]] %string%'
  - '[skellett] (delete|remove) [the] id [based] [score] [(with [id]|named)] %string%
    (in|from|for|of) (stylish|style|simple) [score][ ]board [with] [name[d]] %string%'
  - '[skellett] create [a] [new] (stylish|style|simple) [score][ ]board [with] [name[d]]
    %string%'
  - '[skellett] [(update|edit)] [the] (text|name|display|data|string) [of] id [based]
    [score] [(with [id]|named)] %string%'
  - '[skellett] (delete|remove) [the] (stylish|style|simple) [score][ ][board] [with]
    [name[d]] %string%'
  - '[skellett] [(update|edit)] [the] slot [of] id [based] [score] [(with [id]|named)]
    %string%'
  Nametags:
  - '[skellett] [(set|make)] prefix [of] [the] [name][ ]tag [(with|of)] [id] %string%
    to [(string|text)] %string%'
  - '[skellett] [get] prefix [of] [the] [name][ ]tag [with] [id] %string%'
  - '[skellett] reset [the] [name][ ]tag prefix [(with|of)] [id] %string%'
  - '[skellett] [get] suffix [of] [the] [name][ ]tag [with] [id] %string%'
  - '[skellett] reset [the] [name][ ]tag suffix [(with|of)] [id] %string%'
  - '[skellett] add %player% to [the] [name][ ]tag [(with|of)] [id] %string% [(with|from)
    [[score][ ]board] %-scoreboard%]'
  - '[skellett] [(create|set|make)] [a] [name][ ]tag [ID] [(with|named)] [(name|string|text|id)]
    %string% [(with|from) [player] %-player%]'
  - '[skellett] reset [the] [name][ ]tag [with] [id] %string%'
  - '[skellett] [(set|make)] suffix [of] [the] [name][ ]tag [(with|of)] [id] %string%
    to [(string|text)] %string%'
  - '[skellett] delete [the] [name][ ]tag [with] [id] %string%'
  - '[skellett] remove %player% from [the] [name][ ]tag [(with|of)] [id] %string%'
  Maps:
  - '[skellett] map pixle [colo[u]r] at [coordinate[s]] [x] %number%(,| and) [y] %number%
    (on|in) [skellett] map %map%'
  - '[skellett] map cursor type (of|for) [[map][ ]cursor] %mapcursor%'
  - (show|send|display) [skellett] [custom] map %map% to %players%
  - draw [map] cursor %string% pointing %number% at [coordinate[s]] [x] %number%(,|
    and) [y] %number% on [skellett] map %map%
  - '[skellett] map cursor direction (of|for) [[map][ ]cursor] %mapcursor%'
  - (erase|clear|remove|delete|unregister) [skellett] map %map%
  - '[map] %map% (1¦is|2¦is(n''t| not)) virtual'
  - '[skellett] [the] image (of|from) [the] file [(location|path)] %string%'
  - map (scale|size) of %map%
  - map %map%'s (scale|size)
  - (scale|size) of map %map%
  - draw [buffered] image %mapimage% [at [coordinate[s]] [x] %number%(,| and) [y]
    %number%] on [skellett] map %map%
  - '[skellett] map cursor visibl(e|ity) [state] (of|for) [[map][ ]cursor] %mapcursor%'
  - draw text %string% at [coordinate[s]] [x] %number%(,| and) [y] %number% on [skellett]
    map %map%
  - world of map %map%
  - map %map%'s world
  - '[map] %map% (1¦is|2¦is(n''t| not)) being handled [by skellett]'
  - center (1¦x|2¦z)[( |-)][(position|coord[inate])] (of|from|in) [map] %map%
  - '%map%''s center (1¦x|2¦z)[( |-)][(position|coord[inate])]'
  - '[skellett] map cursor (1¦x|2¦y)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of
    [[map][ ]cursor] %mapcursor%'
  - unlimited [tracking] state (of|from|in) [map] %map%
  - '[map] %map%''s unlimited [tracking] state'
  - '[skellett] [the] event[(-| )]map'
  - '[skellett] [a] new map[[ ]view] (for|from|with) [world] %world%'
  - (manage|override|overwrite|create) [skellett] map %map% [[and] [with] override
    %-boolean%]
  - '[skellett] [(the|all)] [of] [the] map cursors (in|on|for) [skellett] [map] %map%'
  Fishing:
  - '[skellett] fish[ing] hook'
  - '[skellett] [fish[ing]] state'
  - '[skellett] caught (fish|item|entity)'
  - '[the] [fish[ing]] (xp|experience) [earned]'
  Shooting:
  - '[the] [skellett] [(event|get)] bow'
  - '[the] [skellett] [(event|get)] [the] shot (arrow|projectile)'
  - (arrow|shot|velocity) speed [of (shot|arrow)]
  Brewing:
  - '[skellett] [event] brew[ing] [stand] inventory'
  - '[skellett] event-brewinginventory'
  - '[brew[ing]] time (of|in) brew[ing] [stand] [inventory] %brewerinventory%'
  - brew[ing] [stand] %brewerinventory%'s [brew[ing]] time
  - (fuel|burning) [item] (of|in) [brew[ing] stand] [inventory] %brewerinventory%
  - '[brew[ing] stand] %brewerinventory%''s (fuel|burning) [item]'
  - ingredient [item] (of|in) [brew[ing] stand] [inventory] %brewerinventory%
  - '[brew[ing] stand] %brewerinventory%''s ingredient [item]'
  - '[brew[ing]] fuel time (of|in) [brew[ing] stand] [inventory] %brewerinventory%'
  - '[brew[ing] stand] %brewerinventory%''s [brew[ing]] fuel time'
  Files:
  - '[skellett] copy file [path] %string% to [path] %string%'
  - '[skellett] c[reate][ ][f][ile] %string%'
  - '[skellett] d[elete][ ][f][ile] %string%'
  - '[skellett] unzip %string% to %string%'
  - '[skellett] move file [path] %string% to [path] %string%'
  ClientWorldBorders:
  - '[client [side]] [world] border [damage] buffer (for|of) %player%'
  - '%player%''s [client [side]] [world] border [damage] buffer'
  - '[client [side]] [world] border center [location] (for|of) %player%'
  - '%player%''s [client [side]] [world] border center [location]'
  - '[client [side]] [world] border warning [time] (for|of) %player%'
  - '%player%''s [client [side]] [world] border warning [time]'
  - '[client [side]] [world] border size (for|of) %player%'
  - '%player%''s [client [side]] [world] border size'
  - '[client [side]] [world] border damage [amount] (for|of) %player%'
  - '%player%''s [client [side]] [world] border damage [amount]'
  - '[client [side]] [world] border warning distance (for|of) %player%'
  - '%player%''s [client [side]] [world] border warning distance'
  ChatComponent:
  - add click event with action %clickeventaction% (and|with|to) [(execute|text|link)]
    %string% to [text component] %textcomponent%
  - add hover event with action %hovereventaction% (and|with) [(value|text)] %string%
    to [text component] %textcomponent%
  - '[a] [new] text component [with [text]] %string%'
  - add text component %textcomponents% to [book] %itemstack%
  - message text component %textcomponent% to %players%
  ArmorStands:
  - armo[u]r stand (helmet|hat) of %entity%
  - armo[u]r stand %entity%'s (helmet|hat)
  - armo[u]r stand boots of %entity%
  - armo[u]r stand %entity%'s boots
  - armo[u]r stand leg[ging][s] of %entity%
  - armo[u]r stand %entity%'s leg[ging][s]
  - armo[u]r stand chest[ ][plate] of %entity%
  - armo[u]r stand %entity%'s chest[ ][plate]
  ReturnType:
  - (invoke|execute|run) method %string% [(from|of) [(expression|type|class)] %*-object%]
    [with parameter[s] %-objects%]
  - '[(the|all)] [of] [the] [event] methods'
  - '[event] method %string% [is [a] loop[able] %-boolean%] [(from|of) [(expression|type|class)]
    %-object%] [with parameter[s] %-objects%]'
  PrepareEnchant:
  - '[the] enchant[ment] of [enchant[ment]] offer %enchantmentoffer%'
  - offer %enchantmentoffer%'s [enchant[ment]] enchant[ment]
  - '[the] level of [enchant[ment]] offer %enchantmentoffer%'
  - offer %enchantmentoffer%'s [enchant[ment]] level
  - '[(the|all)] [of] [the] enchant[ment] offers'
  - '[the] cost of [enchant[ment]] offer %enchantmentoffer%'
  - offer %enchantmentoffer%'s [enchant[ment]] cost
  Spawners:
  - (make|force) spawner [at] %block% to spawn [[a[n]] entit(y|ies)]
  - (entity|mob|creature) [type] (of|from) spawner [at] %block%
  - '%block%''s spawn[er] (entity|mob|creature) [type]'
  - delay (of|from) spawner [at] %block%
  - '%block%''s spawn[er] delay'
  - spawn[er] delay (of|from) %block%
  Books:
  - open book %itemstack% to %players%
  Jukebox:
  - juke[ ]box %block% (1¦is|2¦is(n't| not)) playing [a] (record|track|song)
ForceRespawn:
- '[skellett] [force] respawn [of] %player%'
- '[skellett] force [the] %player% to respawn'
CenterMessage:
- (message|send [message]) center[ed] %strings% to %players% [[with[ text]] %-string%]
Operators:
- '[(the|all)] [of] [the] Op[erator](s|ed) [players]'
Age:
- '[skellett] age of [entity] %entity%'
- '[entity] %entity%''s age'
SpectralArrow:
- '[spectral] arrow glowing time of %entity%'
- '%entity%''s [spectral] arrow glowing time'
RedstoneCurrent:
- '[the] [skellett] (1¦(new|future)|2¦(old|past)) [event] [redstone] current'
Breed:
- '[entity] %entity% (1¦can|2¦can([ ]no|'')t) [be] breed'
ChunkOutlineBlocks:
- '[(the|all)] [of] [the] blocks [in [a[n]]] (around|outlin(e|ing)) [of] chunk %chunk%
  [[at] [y(-| )coordinate] %-number%]'
ClickedCursor:
- '[the] [skellett] [click[ed]] cursor'
PlayerInventoryCursor:
- '[current [inventory]] cursor of %player%'
- '%player%''s [current [inventory]] cursor'
OfRow:
- '[slot] %number% (1¦is|2¦is(n''t| not)) (within|of|in) row %number% [(of|in|from)
  [inventory] %-inventory%]'
PistonPower:
- '[skellett] piston[s] (power|toggle) [state] of %block%'
- '%block%''s piston (power|toggle) [state]'
RoundDecimal:
- '[Skellett] %number% round[ed] [to] [the] [nearest] %number% decimal (digit[s]|place[s])'
Serialize:
- '[skellett] serialize [variable] %object%'
PistonSticky:
- '[piston] %block% (1¦is|2¦is(n''t| not)) [a] sticky [piston]'
LongDate:
- date (from|of) [(long|milliseconds)] %number%
Syntax:
  Events:
    Hanging:
    - '[the] [un](hung|hang)[(ed|ing)] cause'
    - '[the] (hung|hang)[(ed|ing)] remover [entity]'
    BrewingFuel:
    - '[(the|is)] brew[ing] [stand[s]] consuming [state]'
    - '[skellett] [the] brew[ing] [stand[['']s]] fuel [power]'
    - '[skellett] [the] fuel [power] of [the] brew[ing] [stand]'
    - '[skellett] event-fuel[power]'
    AnvilPrepare:
    - '[the] [skellett] [event] anvil[['']s] inv[entory]'
    - event-anvilinventory
    - '[the] [skellett] [anvil[s]] repair cost (of|from|in) [anvil] [inventory] %anvilinventory%'
    - '[skellett] [anvil] [inventory] %anvilinventory%''s [anvil] repair cost'
  Effects:
    World:
    - world folder of %world%
MaterialName:
- '[the] [spigot] material [name] (from|of) %itemtype%'
- '%itemtype%''s [spigot] material [name]'
Actionbar:
- (send|show) [a[n]] action[ ]bar [(with|from)] [string] %string% to %players%
InstaBreak:
- '[event] inst(ant|a) break [state]'
AmountOfItem:
- '[skellett] [get] (size|number|amount) of dropped %entity%'
- '[skellett] (size|number|amount) of item[[ ]stack] %itemstack%'
ClientWeather:
- '[skellett] [client] weather of %player%'
FallDistance:
- '[the] fall distance (from|of) %entity%'
- '%entity%''s fall distance'
CollidableState:
- '[set] collid(e|able) [state] [of] %livingentity% to %boolean%'
- collid(e|able) [state] [of] %entity%
ClickedSlotType:
- click[ed] slot type
LlamaInventory:
- inventory of Llama %entity%
- Llama inventory of %entity%
NumbersInString:
- '[get] [the] (digit|num[ber])[s] (of|from|in) %string%'
Statistics:
- '[the] stat[istic][s] %string% (of|from) %player% [[(with|from|for|of)] entity[[
  ]type] %-string%] [[(with|from|for|of)] material %-string%]'
EntityRemoveWhenFarAway:
- '[skellett] [(despawn|remove|clear)] [get] %entity% when [it(['']s| is)] far away
  [state]'
RepeaterDelay:
- '[skellett] [redstone] repeater[s] [(redstone|power)] delay of %block%'
- '[redstone] repeater %block%''s [(redstone|power)] delay'
EnderCrystalBase:
- '[ender] crystal base [visib(le|ility)] [state] of %entity%'
- '%entity%''s [ender] crystal base [visib(le|ility)] [state]'
Metadata:
- '[(skellett|fixed)] meta[ ]data [value] %string% (of|in|within) %object%'
BabyAdult:
- '[(make|set)] [entity] %entity% [to] [a[n]] (1¦baby|2¦adult)'
ItemframeRotation:
- '[skellett] rotation (of|from) item[ ]frame %entity%'
- '[skellett] %entity%''s item[ ]frame rotation'
- '[skellett] item[ ]frame %entity%''s rotation'
SpreadSource:
- '[spread] source block'
SkullOwner:
- '[the] [skellett] skull[ ]owner of [skull] %block%'
- '[skellett] [skull] %block%''s skull[ ]owner'
ItemCooldown:
- '%player% (1¦(has|does)|2¦(has|does)(n''t| not)) [(have|got)] [a] cool[ ]down for
  [(item|material)] %string%'
- '[the] cool[ ]down of [(item|material)] %string% (for|of) %players%'
- '[(item|material)] %string%''s cool[ ]down (for|of) %players%'
SilentState:
- (silent|quiet) [state] [of] [entit(y|ies)] %entities%
TitleAndSubtitle:
- remove [(the|all)] [of] [the] arrows stuck in %player%
- (send|show) [a] title [from] %string% [(with|and) [subtitle] %-string%] (to|for)
  %players% for %timespan%(,| and| with) %timespan% [fade[ ]in](,| and| with) %timespan%
  [fade[ ]out]
- (send|show) %players% [a] title [(with|from)] %string% [(with|and) [subtitle] %-string%]
  for %timespan%(,| and| with) %timespan% [fade[ ]in](,| and| with) %timespan% [fade[
  ]out]
Chunks:
- '[skellett] unload chunk %chunk% [[with] sav(e|ing) %-boolean%]'
- '[skellett] load chunk %chunk% [[with] generat(e|ing) %-boolean%]'
Adult:
- '[entity] %entity% (1¦is|2¦is(n''t| not)) [a[n]] adult'
ClickedType:
- '[the] [skellett] click[ed] type'
ClickedAction:
- (click[ed]|inventory) action
SprintingState:
- (sprint|run)[ing] [state] of %player%
TargetReason:
- '[the] target reason'
InWater:
- '[entity] %entity% (1¦is|2¦is(n''t| not)) in water'
Whitelist:
- reload [the] white[ ]list
- '[set] white[ ]list [to] %boolean%'
Spectate:
- (spec[tat(e|or|ing)]|view[ing]) [(target|state)] of %player%
- '%player%''s (spec[tat(e|or|ing)]|view[ing]) [(target|state)]'
ClearSlot:
- (clear|empty|reset) (inventory|menu|gui) [slot %-integer%] [(of|in)] %inventory%
AmountOfVariables:
- (size|amount) of [all] variables
HitboxSize:
- '[the] hitbox width of %entity%'
- '%entity%''s hitbox width'
- '[the] width of %entity%''s hitbox'
- '[the] hitbox length of %entity%'
- '%entity%''s hitbox length'
- '[the] length of %entity%''s hitbox'
LlamaColour:
- Llama colo[u]r of %entity%
- Llama %entity%'s colo[u]r
- '%entity%[''s] Llama colo[u]r'
BlockConstructor:
- (create|start|make|build|construct) %string% with %itemtype% at %location% [[with
  effect[s]] %-boolean%]
ProjectileBounce:
- '[skellett] %entity%[['']s] bounc(e|ing) [state]'
NoNBT:
- '%itemstacks% with [all] removed NBT'
- remove[ed] [all] NBT [from] %itemstacks%
- '%itemstacks% with hid(den|ing) enchant[ment][s]'
- '[skellett] (shiny|hidden enchant[ment][s]|glow|glowing) [item] %itemstack%'
- '%itemstacks% with(out [any]| no) NBT'
ClickedRow:
- '[the] click[ed] row'
ClickedRawSlot:
- click[ed] raw slot
BreedState:
- '[skellett] breeding state of [entity] %entity%'
- '[entity] %entity%''s breeding state'
ClickedItem:
- '[the] [skellett] [click[ed]] item'
SleepIgnored:
- ignored sleep[ing] [state] of %player%
ServerTick:
- '[the] server tick[s]'
- '[the] server''s tick[s]'
- '[the] tick[s] of [the] server'
CustomName:
- '[skellett] custom name of %entity%'
- '[skellett] custom name visib(le|ility) of %entity%'
- '[skellett] visib(le|ility) of %entity%''s custom name'
ClickedInventory:
- click[ed] inventory
ItemframeItem:
- '[skellett] item (in|inside|within|of|from) item[ ]frame %entity%'
- '[skellett] %entity%''s item[ ]frame item'
- '[skellett] item[ ]frame %entity%''s item'
ClickedSlot:
- '[the] click[ed] slot'
EntityUUID:
- '[skellett] entity (from [the]|of) (uuid|[universal] unique id) %string%'
- '[skellett] entity (uuid|[universal] unique id) of [entity] %entity%'
- '[entity] %entity%''s entity (uuid|[universal] unique id)'
MathExpressions:
- absolute [value] of %number%
AbsorptionHearts:
- '[skellett] absorption hearts of %player%'
- '[skellett] %player%''s absorption hearts'
EnchantmentLevel:
- '[skellett] enchant[ment] level (from|of) %enchantment% (of|in|on) %itemstack%'
- '[skellett] %itemstack%''s enchant[ment] level (from|of|on) %enchantment%'
LineOfSight:
- '%entity% (1¦can|2¦can([ ]no|'')t) [visibly] see %entity%'
ClientChest:
- '[skellett] (1¦open|2¦close) [the] %block% for %players%'
- '[skellett] make [the] %block% (appear|look) (1¦open|2¦closed) for %players%'
- '[skellett] play chest (1¦open|2¦close) animation at %block% for %players%'
EnderCrystalBeam:
- '[ender] crystal (target|beam) [location] of %entity%'
- '%entity%''s [ender] crystal (target|beam) [location]'
MaxDamageTicks:
- '[skellett] [maximum] damage delay of %entity%'
- '[skellett] %entity%''s [maximum] damage delay'
LlamaInventoryDecor:
- '[Llama] decor (of|in) [inventory] [of] [Llama] %llamainventory%'
- '[Llama] %llamainventory%''s [inventory] decor'
OS-Stuff:
- '[the] server[['']s] java version'
- '[the] java version of [the] server'
EntityEffect:
- '[skellett] (make|force) %entity% [to] [(perform|do)] [entity] effect %entityeffect%'
OpenInventory:
- '[skellett] open [[better] inventory [type]] %string% [with %-number% row[s]] [named
  %-string%] to %players%'
ScoreboardExists:
- score[ ][board] %string% (1¦(is set|[does] exist[s])|2¦(is(n't| not) set|does(n't|
  not) exist[s]))
TeleportPlayerWorldSpawn:
- teleport %players% to [world] spawn (of|in) [world] %string%
- '[skellett] teleport %players% to world %string% [spawn]'
InventoryType:
- inventory type of %inventory%
- '%inventory%''s inventory type'
EventCancelled:
- '[(the|this)] event (1¦is|2¦is(n''t| not)) cancelled'
AgeLock:
- '[skellett] age lock of [entity] %entity%'
- '[entity] %entity%''s age lock'
UpdateInventory:
- update [the] (inventory|menu|gui) %inventory%
Download:
- '[skellett] d[ownload][l] [from] [url] %string% to %string%'
SlimeSize:
- '[skellett] slime size of %entity%'
- '[skellett] %entity%''s slime size'
NextEmptySlot:
- (next|first) empty slot of %inventory%
RedstonePower:
- '[block] %block% (1¦(is|has)|2¦(is|has)(n''t| not)) [got] [redstone] powered'
PlayerWindowProperty:
- (set|change) %player%['s] (window|[current] inventory) property [of] %inventoryproperty%
  to %number%
PlayerCanSee:
- '[player] %player% (1¦can|2¦can([ ]no|'')t) see [player] %player%'
LeashBlock:
- (leash|lead) %livingentities% to %block%
ItemsWithin:
- '[skellett] [get] item[s] (of|in|inside|within) entity %entity%'
ActivePotionEffects:
- '[(the|all)] [of] [the] [active] potion[s] [effects] (on|of) %entity%'
ViewingCredits:
- '[player] %player% (1¦is|2¦is(n''t| not)) viewing [the] credits'
FinalDamage:
- '[skellett] final damage'
BlockStates:
- '[(the|all)] [of] [the] [possible] drop[(ped|s)] [items] (from|of) [block [at]]
  %location% [(with|using) %-itemstack%]'
- '[redstone] power [[being] receiv(ed|ing)] [(from|at)] %location%'
- '%location% [redstone] power [[being] received]'
InventoryRows:
- '[skellett] (gui|menu|inventory|chest|window) row[s] (of|from) %inventory%'
- '%inventory%''s (gui|menu|inventory|chest|window) row[s]'
BlockHardness:
- '[the] block (break delay|durability|hardness) of [all] %block%'
- '[all] %block%''s block (break delay|durability|hardness)'
EnchantsOnItem:
- '[(the|all)] [of] [the] enchant[ment]s (on|of|from) %itemstack%'
SneakingState:
- sneak[ing] [state] of %player%
TNTFuseTime:
- '[skellett] (fuse time|time until blowup) of [the] [primed] [tnt] %entity%'
- '[skellett] [primed] [tnt] %entity%[''s] (fuse time|time until blowup)'
Exhaustion:
- exhaustion of %player%
- '%player%''s exhaustion'
ClickedTypeNumber:
- click[ed] type num[ber]
EntityID:
- '[the] [entity] [number] id (of|from) %entities%'
- '%entities%''s [entity] [number] id'
SizeOfInventory:
- '[skellett] (gui|menu|inventory|chest|window) (size|number|slots) (of|from) %inventory%'
- '%inventory%''s (gui|menu|inventory|chest|window) (size|number|slots)'
PistonReaction:
- '[the] piston [move] reaction (of|from) %block%'
- '%block%''s piston [move] reaction'
InvulnerableState:
- invulnerable state of %entity%
- '%entity%''s silent invulnerable'
